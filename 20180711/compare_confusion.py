import itertools

import numpy as np
import matplotlib.pyplot as plt

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap='RdBu'):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    v_bound = max(abs(cm.min()), cm.max())
    plt.imshow(cm, interpolation='nearest', cmap=cmap, vmin=-v_bound, vmax=v_bound)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' #if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')


flux_weighted = np.array([[ 0.70772676,  0.1075028 ,  0.00186637,  0.18290407],
                          [ 0.7412731 ,  0.17043121,  0.00410678,  0.08418891],
                          [ 0.01731602,  0.04329004,  0.75757576,  0.18181818],
                          [ 0.13741722,  0.02649007,  0.02152318,  0.81456954]]
)

non_flux_weighted = np.array([   [0.61, 0.26, 0.00, 0.13],
                    [0.59, 0.34, 0.01, 0.07],
                    [0.03, 0.05, 0.79, 0.12],
                    [0.19, 0.10, 0.07, 0.63] ])

plt.figure(figsize=(10,10))
plot_confusion_matrix(flux_weighted-non_flux_weighted, ['Spheroid', 'Disk', 'Irregular', 'Point Source'])
plt.savefig('difference_1.pdf', dpi=600)

non_flux_weighted = np.array([   [0.47, 0.02, 0.15, 0.31, 0, 0, 0, 0, 0, 0.02, 0, 0.03],
                        [0.14, 0, 0.09, 0.49, 0, 0, 0, 0, 0.02, 0.09, 0.02, 0.15],
                        [0.34, 0.03, 0.23, 0.21, 0, 0, 0, 0, 0, 0.08, 0, 0.10],
                        [0.47, 0.01, 0.11, 0.35, 0, 0, 0, 0, 0.01, 0.03, 0, 0.02],
                        [0.42, 0.04, 0.08, 0.25, 0, 0.04, 0, 0, 0, 0, 0, 0.17],
                        [0.44, 0.01, 0.13, 0.29, 0, 0, 0, 0, 0, 0.05, 0, 0.08],
                        [0.09, 0.09, 0.00, 0.36, 0, 0, 0.09, 0, 0.18, 0, 0, 0.18],
                        [0.00, 0, 0, 0.57, 0, 0, 0, 0, 0.29, 0, 0, 0.14],
                        [0.01, 0.01, 0, 0.01, 0, 0, 0.01, 0, 0.83, 0.01, 0.01, 0.09],
                        [0.08, 0.02, 0.12, 0.08, 0, 0, 0.01, 0, 0.04, 0.14, 0, 0.5],
                        [0.17, 0.04, 0.19, 0.19, 0, 0, 0, 0, 0, 0.08 ,0, 0.32],
                        [0.03, 0.03, 0.02, 0.10, 0, 0.01, 0.01, 0, 0.12, 0.08, 0.01, 0.59] ])

flux_weighted = np.array(
[[  6.15457116e-01,   3.77002828e-03,   1.75306315e-01,   1.25353440e-01,
    0.00000000e+00,   0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
    1.88501414e-03,   4.80678605e-02,   0.00000000e+00,   3.01602262e-02],
 [  2.46153846e-01,   0.00000000e+00,   1.07692308e-01,   2.46153846e-01,
    0.00000000e+00,   0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
    0.00000000e+00,   1.07692308e-01,   0.00000000e+00,   2.92307692e-01],
 [  3.77334192e-01,   6.43915003e-03,   2.79459111e-01,   8.82163554e-02,
    6.43915003e-04,   6.43915003e-04,   0.00000000e+00,   0.00000000e+00,
    1.93174501e-03,   1.30714746e-01,   0.00000000e+00,   1.14616871e-01],
 [  6.29629630e-01,   0.00000000e+00,   1.50793651e-01,   1.58730159e-01,
    0.00000000e+00,   0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
    5.29100529e-03,   3.43915344e-02,   0.00000000e+00,   2.11640212e-02],
 [  2.50000000e-01,   0.00000000e+00,   1.25000000e-01,   3.33333333e-01,
    0.00000000e+00,   0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
    0.00000000e+00,   8.33333333e-02,   0.00000000e+00,   2.08333333e-01],
 [  5.17647059e-01,   0.00000000e+00,   1.52941176e-01,   1.76470588e-01,
    0.00000000e+00,   0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
    0.00000000e+00,   8.23529412e-02,   0.00000000e+00,   7.05882353e-02],
 [  9.09090909e-02,   0.00000000e+00,   1.81818182e-01,   1.81818182e-01,
    0.00000000e+00,   0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
    1.81818182e-01,   9.09090909e-02,   0.00000000e+00,   2.72727273e-01],
 [  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,   5.71428571e-01,
    0.00000000e+00,   0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
    2.85714286e-01,   0.00000000e+00,   0.00000000e+00,   1.42857143e-01],
 [  4.69483568e-03,   0.00000000e+00,   0.00000000e+00,   1.87793427e-02,
    0.00000000e+00,   0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
    8.02816901e-01,   1.87793427e-02,   0.00000000e+00,   1.54929577e-01],
 [  5.41666667e-02,   5.55555556e-03,   9.86111111e-02,   2.63888889e-02,
    0.00000000e+00,   0.00000000e+00,   1.38888889e-03,   0.00000000e+00,
    0.00000000e+00,   1.81944444e-01,   0.00000000e+00,   6.31944444e-01],
 [  1.55844156e-01,   1.29870130e-02,   1.68831169e-01,   7.79220779e-02,
    0.00000000e+00,   0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
    0.00000000e+00,   1.55844156e-01,   0.00000000e+00,   4.28571429e-01],
 [  3.16301703e-02,   1.21654501e-02,   1.94647202e-02,   1.45985401e-02,
    0.00000000e+00,   2.43309002e-03,   0.00000000e+00,   0.00000000e+00,
    6.08272506e-02,   7.29927007e-02,   4.86618005e-03,   7.81021898e-01]]
)

plt.figure(figsize=(10,10))
plot_confusion_matrix(flux_weighted-non_flux_weighted, ['Disk,Irregular', 'Disk,Point Source', 'Disk,Spheroid', 'Irregular,Disk',
                                                        'Irregular,Point Source', 'Irregular,Spheroid', 'Point Source,Disk',
                                                        'Point Source,Irregular', 'Point Source,Spheroid', 'Spheroid,Disk',
                                                        'Spheroid,Irregular','Spheroid,Point Source'])
plt.savefig('difference_2.pdf', dpi=600)


non_flux_weighted = np.array([
    [0.79, 0.02, 0.16, 0, 0, 0.03],
    [0.61, 0.03, 0.16, 0, 0.01, 0.20],
    [0.43, 0.04, 0.29, 0, 0, 0.24],
    [0.65, 0.03, 0.06, 0, 0.03, 0.23],
    [0.56, 0.02, 0.22, 0, 0, 0.2],
    [0.09, 0.04, 0.07, 0, 0.01, 0.78]
])

flux_weighted = np.array(
[[  7.53300903e-01,   2.77970813e-03,   2.13342599e-01,   0.00000000e+00, 0.00000000e+00,   3.05767894e-02,],
 [  4.60526316e-01,   0.00000000e+00,   2.23684211e-01,   0.00000000e+00, 0.00000000e+00,   3.15789474e-01,],
 [  3.43598768e-01,   6.59920810e-03,   3.69115706e-01,   4.39947206e-04, 4.39947206e-04,   2.79806423e-01,],
 [  5.80645161e-01,   0.00000000e+00,   1.61290323e-01,   0.00000000e+00, 0.00000000e+00,   2.58064516e-01,],
 [  4.75308642e-01,   6.17283951e-03,   2.77777778e-01,   0.00000000e+00, 0.00000000e+00,   2.40740741e-01,],
 [  3.84615385e-02,   8.01282051e-03,   6.73076923e-02,   0.00000000e+00, 4.80769231e-03,   8.81410256e-01,]]
)
plt.figure(figsize=(10,10))
plot_confusion_matrix(flux_weighted-non_flux_weighted, ['Disk,Irregular','Disk,Point Source','Disk,Spheroid',
                                                        'Irregular,Point Source', 'Irregular,Spheroid','Point Source,Spheroid'])
plt.savefig('difference_3.pdf', dpi=600)